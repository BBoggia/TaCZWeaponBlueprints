import json
import tkinter as tk
from tkinter import filedialog
from math import ceil

# Hide the main tkinter window
root = tk.Tk()
root.withdraw()

# Open the file selector dialog and allow the user to select one or more directories
file_paths = filedialog.askopenfilenames(
    title='Select JSON files to modify',
    filetypes=[('JSON files', '*.json')]
)

print(f"Selected files: {file_paths}")

exit()


material_to_change = 'forge:ingots/iron'

# Loop over each selected file
for file_path in file_paths:

    # Skip if no file was selected
    if not file_path:
        continue

    # Read the contents of the selected file
    with open(file_path, 'r', encoding='utf-8') as file:
        try:
            data = json.load(file)
        except json.JSONDecodeError as e:
            print(f"Could not parse JSON in file: {file_path}")
            print(f"Error: {e}")
            continue

    # Check if 'materials' exists and is a list
    if 'materials' not in data or not isinstance(data['materials'], list):
        print(f"No 'materials' list found in file: {file_path}")
        continue

    modified = False

    # Loop over materials to find the one with "tag": "forge:ingots/iron"
    for material in data['materials']:
        try:
            if (
                'item' in material and
                'tag' in material['item'] and
                material['item']['tag'] == material_to_change and
                'count' in material
            ):
                current_value = material['count']
                # Random multiplier between 1.75 and 2.5
                rand_multiplier = 1.75 + (0.75 * (current_value % 2))
                new_value = int(ceil(current_value * rand_multiplier))
                material['count'] = new_value
                print(f"File: {file_path}")
                print(f"Doubling count value for {material_to_change} from {current_value} to {new_value}")
                modified = True
        except (TypeError, KeyError):
            # Handle cases where expected keys are missing or values are of unexpected type
            print(f"Unexpected structure in material item in file: {file_path}")
            continue

    if modified:
        # Write the modified content back to the file
        with open(file_path, 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=2)
        print(f"Updated file: {file_path}")
        pass
    else:
        print(f"No matching item found in file: {file_path}")